---

neofs_storage__version: '0.30.2'
neofs_storage__bin_url: 'https://github.com/nspcc-dev/neofs-node/releases/download/v{{ neofs_storage__version }}/neofs-node-amd64'
neofs_storage__cli_bin_url: 'https://github.com/nspcc-dev/neofs-node/releases/download/v{{ neofs_storage__version }}/neofs-cli-amd64'

neofs_storage__docker_image: 'nspccdev/neofs-ir:{{ neofs_storage__version }}'
neofs_storage__use_docker: False

# Instance name to have multiple NeoFS nodes on the same host
neofs_storage__instance: ''

neofs_storage__user: 'neofs-storage{{ neofs_storage__instance }}'
neofs_storage__group: 'neofs-storage{{ neofs_storage__instance }}'

neofs_storage__conf_dir: '/etc/neofs/storage{{ neofs_storage__instance }}'
neofs_storage__config_path: '{{ neofs_storage__conf_dir }}/config.yml'
neofs_storage__bin_path: '/usr/bin/neofs-node'
neofs_storage__cli_bin_path: '/usr/bin/neofs-cli'
neofs_storage__control_api_config_path: '{{ neofs_storage__conf_dir }}/control.yml'

# Directory for databases and processing results
neofs_storage__data_dir: '/srv/neofs{{ neofs_storage__instance }}'
neofs_storage__meta_dir: '{{ neofs_storage__data_dir }}'

neofs_storage__wallet_struct: ''
neofs_storage__wallet_path: '{{ neofs_storage__conf_dir }}/wallet.json'
neofs_storage__wallet_address: ''
neofs_storage__wallet_password: ''

neofs_storage__morph_endpoints: []
neofs_storage__announce_addresses: [ '{{ neofs_storage__grpc_address | ansible.utils.ipwrap }}:{{ neofs_storage__grpc_port }}' ]

neofs_storage__grpc_address: '::'
neofs_storage__grpc_port: 8080
neofs_storage__grpcs_port: 8082
neofs_storage__grpc_allow: []
neofs_storage__grpc_group_allow: []
neofs_storage__grpc_host_allow: []

neofs_storage__tls_enabled: False
neofs_storage__tls_cert: ''
neofs_storage__tls_key: ''
neofs_storage__tls_cert_file: '{{ neofs_storage__conf_dir }}/tls.cert'
neofs_storage__tls_key_file: '{{ neofs_storage__conf_dir }}/tls.key'

neofs_storage__control_enabled: True
neofs_storage__control_address: 'localhost'
neofs_storage__control_port: 8091
neofs_storage__control_allow: []
neofs_storage__control_group_allow: []
neofs_storage__control_host_allow: []

neofs_storage__prometheus_enabled: False
neofs_storage__prometheus_address: 'localhost'
neofs_storage__prometheus_port: 9911
neofs_storage__prometheus_allow: []
neofs_storage__prometheus_group_allow: []
neofs_storage__prometheus_host_allow: []

neofs_storage__pprof_enabled: False
neofs_storage__pprof_address: 'localhost'
neofs_storage__pprof_port: 9912
neofs_storage__pprof_allow: []
neofs_storage__pprof_group_allow: []
neofs_storage__pprof_host_allow: []

neofs_storage__grpc_endpoints:
  - address: '{{ neofs_storage__grpc_address }}'
    port: '{{ neofs_storage__grpc_port }}'
    allow: '{{ neofs_storage__grpc_allow + neofs_storage__grpc_group_allow + neofs_storage__grpc_host_allow }}'
  - enabled: '{{ neofs_storage__tls_enabled }}'
    address: '{{ neofs_storage__grpc_address }}'
    port: '{{ neofs_storage__grpcs_port }}'
    allow: '{{ neofs_storage__grpc_allow + neofs_storage__grpc_group_allow + neofs_storage__grpc_host_allow }}'
    tls: True
    tls_cert:      '{{ neofs_storage__tls_cert }}'
    tls_key:       '{{ neofs_storage__tls_key }}'
    tls_cert_file: '{{ neofs_storage__tls_cert_file }}'
    tls_key_file:  '{{ neofs_storage__tls_key_file }}'

neofs_storage__grpc: |
  {% for endpoint in neofs_storage__grpc_endpoints %}
  {% if 'enabled' not in endpoint or endpoint.enabled %}
  {{ loop.index0 }}:
    endpoint: '{{ endpoint.address | ansible.utils.ipwrap }}:{{ endpoint.port }}'
  {% if 'tls' in endpoint and endpoint.tls %}
    tls:
      enabled: True
      certificate: {{ neofs_storage__tls_cert_file }}
      key: {{ neofs_storage__tls_key_file }}
  {% endif %}
  {% endif %}
  {% endfor %}

neofs_storage__grpc_ferm_rules: |
  {% for endpoint in neofs_storage__grpc_endpoints %}
  {% if 'enabled' not in endpoint or endpoint.enabled %}
  - dport: [ '{{ endpoint.port }}' ]
    daddr: [ "{{ endpoint.address }}{{ '/0' if endpoint.address in ['0.0.0.0', '::0', '::'] }}" ]
    saddr: {{ endpoint.allow }}
    protocol: 'tcp'
  {% endif %}
  {% endfor %}

neofs_storage__raw_config:
  logger:
    level: info
  morph:
    endpoints: '{{ neofs_storage__morph_endpoints }}'
  node:
    wallet:
      path: '{{ neofs_storage__wallet_path }}'
      address: '{{ neofs_storage__wallet_address }}'
      password: '{{ neofs_storage__wallet_password }}'
    addresses: '{{ neofs_storage__announce_addresses }}'
    persistent_sessions:
      path: '{{ neofs_storage__data_dir }}/sessions'
    persistent_state:
      path: '{{ neofs_storage__data_dir }}/state'
    subnet:
      exit_zero: False
    relay: False
  grpc: '{{ neofs_storage__grpc | from_yaml }}'
  control:
    grpc:
      endpoint: '{{ neofs_storage__control_address | ansible.utils.ipwrap }}:{{ neofs_storage__control_port }}'
  storage:
    shard:
      0:
        metabase:
          path: '{{ neofs_storage__meta_dir }}/metabase.db'
        writecache:
          path: '{{ neofs_storage__meta_dir }}/write_cache'
        blobstor:
          - type: blobovnicza
            path: '{{ neofs_storage__data_dir }}/data/blobovnicza'
          - type: fstree
            path: '{{ neofs_storage__data_dir }}/data'
  object:
    put:
      pool_size_remote: 100
  apiclient:
    dial_timeout: 15s
    stream_timeout: 20s

neofs_storage__default_config:
  - options:
      node:
        attribute_0: 'UN-LOCODE:FI HEL'
        attribute_1: 'Price:1'

  - enabled: '{{ neofs_storage__prometheus_enabled }}'
    options:
      prometheus:
        enabled: True
        address: '{{ neofs_storage__prometheus_address | ansible.utils.ipwrap }}:{{ neofs_storage__prometheus_port }}'

  - enabled: '{{ neofs_storage__pprof_enabled }}'
    options:
      pprof:
        enabled: True
        address: '{{ neofs_storage__pprof_address | ansible.utils.ipwrap }}:{{ neofs_storage__pprof_port }}'

neofs_storage__config: []
neofs_storage__group_config: []
neofs_storage__host_config: []

neofs_storage__combined_config: '{{
  neofs_storage__default_config +
  neofs_storage__config +
  neofs_storage__group_config +
  neofs_storage__host_config }}'


# Flag to skip binaries download
neofs_storage__binaries_download: True

# Force debops.ferm run via role import
# May be useful when you need to have multiple instances with different
# firewall rules for each one.
neofs_storage__debops_ferm_import: False

# firewall configuration to be applied with debops.ferm role
neofs_storage__ferm__dependent_rules:
  - type: 'accept'
    name: 'neofs-storage{{ neofs_storage__instance }}_grpc'
    rules: '{{ neofs_storage__grpc_ferm_rules | from_yaml }}'
    rule_state: 'present'

  - type: 'accept'
    name: 'neofs-storage{{ neofs_storage__instance }}_prometheus'
    dport: [ '{{ neofs_storage__prometheus_port }}' ]
    daddr: [ "{{ neofs_storage__prometheus_address }}{{ '/0' if neofs_storage__prometheus_address in ['0.0.0.0', '::0', '::'] }}" ]
    saddr: '{{ neofs_storage__prometheus_allow + neofs_storage__prometheus_group_allow + neofs_storage__prometheus_host_allow }}'
    protocol: 'tcp'
    rule_state: "{{ 'present' if neofs_storage__prometheus_enabled else 'absent' }}"

  - type: 'accept'
    name: 'neofs-storage{{ neofs_storage__instance }}_pprof'
    dport: [ '{{ neofs_storage__pprof_port }}' ]
    daddr: [ "{{ neofs_storage__pprof_address }}{{ '/0' if neofs_storage__pprof_address in ['0.0.0.0', '::0', '::'] }}" ]
    saddr: '{{ neofs_storage__pprof_allow + neofs_storage__pprof_group_allow + neofs_storage__pprof_host_allow }}'
    protocol: 'tcp'
    rule_state: "{{ 'present' if neofs_storage__pprof_enabled else 'absent' }}"

  - type: 'accept'
    name: 'neofs-storage{{ neofs_storage__instance }}_control'
    dport: [ '{{ neofs_storage__control_port }}' ]
    daddr: [ "{{ neofs_storage__control_address }}{{ '/0' if neofs_storage__control_address in ['0.0.0.0', '::0', '::'] }}" ]
    saddr: '{{ neofs_storage__control_allow + neofs_storage__control_group_allow + neofs_storage__control_host_allow }}'
    protocol: 'tcp'
    rule_state: "{{ 'present' if neofs_storage__control_enabled else 'absent' }}"
